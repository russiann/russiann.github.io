<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Russian Rebouças</title>
  <subtitle>Javascript Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://russiann.github.io/"/>
  <updated>2016-09-10T17:41:15.000Z</updated>
  <id>http://russiann.github.io/</id>
  
  <author>
    <name>Russian Rebouças</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>💧Drops: Javascript Reduce</title>
    <link href="http://russiann.github.io/2016/09/10/drops-javascript-reduce/"/>
    <id>http://russiann.github.io/2016/09/10/drops-javascript-reduce/</id>
    <published>2016-09-10T13:24:46.000Z</published>
    <updated>2016-09-10T17:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<!--- Invisible Char: > < --->
<p>Com certeza você sabe fazer um <strong>loop</strong> em uma collection.<br>Mas você sabe o que significa <strong>reduzir</strong> uma collection??</p>
<p>Não? Isso te soa estranho? Calma, é bem simples, tenho certeza que você já fez isso:</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</div><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++ )&#123;</div><div class="line">    total += numbers[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pronto! Você <strong>reduziu</strong> a collection de numbers dentro de uma variável total. 😃<br>Vamos ver outro exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> message = <span class="string">""</span>;</div><div class="line"><span class="keyword">const</span> words = [<span class="string">"reducing"</span>, <span class="string">"is"</span>, <span class="string">"simple"</span>];</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; words.length; i++ )&#123;</div><div class="line">  message += words[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Agora você <strong>reduziu</strong> a collection words dentro da variável message.</p>
<p>Acho que você deve ter notado a semelhança entre os dois códigos.<br>Iniciamos com uma <strong>collection</strong> (numbers, words) e uma <strong>variável</strong> (total, message) com um <strong>valor inicial</strong> (0, “”).<br>Depois iteramos na collection para alterar o valor da variável.</p>
<blockquote>
<p><em>Tá mas é só isso? um </em><code>for</code><em>?</em> 🤔</p>
</blockquote>
<p>Vamos lá! Veja esse código:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, number</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> total + number;</div><div class="line">&#125;, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// sum = 33</span></div><div class="line"> </div><div class="line"><span class="comment">// Você também pode usar Arrow Function do ES6</span></div><div class="line"><span class="keyword">const</span> sum = numbers.reduce((total, number) =&gt; total + number, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><em>Wow. Então o objeto Array já sabe reduzir??</em> 😮</p>
</blockquote>
<p><strong>Exatamente!</strong> Sempre que você quiser iterar em uma collection a fim de criar um novo valor pergunte a si mesmo se você pode considerar o uso da função <code>Array.prototype.reduce</code>.</p>
<h2 id="Sintaxe"><a href="#Sintaxe" class="headerlink" title="Sintaxe"></a>Sintaxe</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">array.reduce(callback, [initialValue]);</div><div class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, index, array</span>)</span>&#123;</div><div class="line">  <span class="comment">// do stuff</span></div><div class="line">&#125;, [initialValue]);</div></pre></td></tr></table></figure>
<p>O reduce recebe dois parâmetros:</p>
<ol>
<li><em>callback</em> : Uma função de callback (que explicarei logo em seguida).</li>
<li><em>initialValue</em> : (opcional): Um valor inicial para o retorno que pode ser qualquer dado. Se esse parâmetro não for informado, o valor inicial padrão é o primeiro item do array a ser iterado.</li>
</ol>
<p>O reduce executa a função de callback uma vez para cada elemento presente no array, excluindo furos (valores indefinidos) , recebendo quatro argumentos: o valor inicial (ou o valor do callback anterior, <em>previousValue</em>), o valor do elemento corrente (<em>currentValue</em>), o índice (<em>index</em>) corrente e o próprio <em>array</em> onde a iteração está ocorrendo. - <em>MDN</em></p>
<p>Você pode reduzir a qualquer tipo de dado. Não apenas soma ou concatenação, exemplo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> people = [</div><div class="line">  &#123; name: <span class="string">'João'</span>, age: <span class="number">32</span>&#125;,</div><div class="line">  &#123; name: <span class="string">'Maria'</span>, age: <span class="number">22</span>&#125;,</div><div class="line">  &#123; name: <span class="string">'José'</span>, age: <span class="number">13</span>&#125;,</div><div class="line">  &#123; name: <span class="string">'Francisco'</span>, age: <span class="number">56</span>&#125;,</div><div class="line">  &#123; name: <span class="string">'Mariana'</span>, age: <span class="number">49</span>&#125;,</div><div class="line">  &#123; name: <span class="string">'Marcos'</span>, age: <span class="number">26</span>&#125;,</div><div class="line">];</div><div class="line"> </div><div class="line"><span class="comment">// Retorna a pessoa mais velha da lista</span></div><div class="line"><span class="keyword">let</span> oldest = people.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, curr</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (curr.age &gt; prev.age) &#123;</div><div class="line">    <span class="keyword">return</span> curr;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> prev;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// oldest = &#123;name: "Francisco", age: 56&#125;</span></div><div class="line"> </div><div class="line"><span class="comment">// Com Arrow function</span></div><div class="line"><span class="keyword">const</span> oldest = people.reduce((prev, curr) =&gt; (curr.age &gt; prev.age) ? curr : prev )</div></pre></td></tr></table></figure>
<p>Você também pode ler a <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">Documentação do Reduce no MDN</a> para ir mais afundo</p>
<p>Parabéns! Agora você sabe o que é e como usar o Reduce! 🤘🏻</p>
<p><img src="https://i.giphy.com/7rj2ZgttvgomY.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;!--- Invisible Char: &gt; &lt; ---&gt;
&lt;p&gt;Com certeza você sabe fazer um &lt;strong&gt;loop&lt;/strong&gt; em uma collection.&lt;br&gt;Mas você sabe o que significa &lt;strong&gt;reduzir&lt;/strong&gt; uma collection??&lt;/p&gt;
&lt;p&gt;Não? Isso te soa estranho? Calma, é bem simples, tenho certeza que você já fez isso:&lt;/p&gt;
    
    </summary>
    
    
      <category term="drops" scheme="http://russiann.github.io/tags/drops/"/>
    
  </entry>
  
  <entry>
    <title>Intro</title>
    <link href="http://russiann.github.io/2016/09/09/hello-world/"/>
    <id>http://russiann.github.io/2016/09/09/hello-world/</id>
    <published>2016-09-09T12:15:00.000Z</published>
    <updated>2016-09-10T17:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Resolvi fazer um devblog! 😃</p>
<a id="more"></a>
<p><img src="https://i.giphy.com/3o6Ztm0Lv2eAMmNiZq.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Resolvi fazer um devblog! 😃&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
